{
    "Chinese Remainder Theorem (Multivariable) Template": {
        "prefix": "alg.crt",
        "body": [
          "import operator as op",
          "from functools import reduce",
          "",
          "",
          "def gcd(x, y):",
          "    \"\"\"greatest common divisor of x and y\"\"\"",
          "    while y:",
          "        x, y = y, x % y",
          "    return x",
          "",
          "",
          "def chinese_remainder(a, p):",
          "    \"\"\"returns x s.t. x = a[i] (mod p[i]) where p[i] is prime for all i\"\"\"",
          "    prod = reduce(op.mul, p, 1)",
          "    x = [prod // pi for pi in p]",
          "    return sum(a[i] * pow(x[i], p[i] - 2, p[i]) * x[i] for i in range(len(a))) % prod",
          "",
          "",
          "def extended_gcd(a, b):",
          "    \"\"\"returns gcd(a, b), s, r s.t. a * s + b * r == gcd(a, b)\"\"\"",
          "    s, old_s = 0, 1",
          "    r, old_r = b, a",
          "    while r:",
          "        q = old_r // r",
          "        old_r, r = r, old_r - q * r",
          "        old_s, s = s, old_s - q * s",
          "    return old_r, old_s, (old_r - old_s * a) // b if b else 0",
          "",
          "",
          "def composite_crt(b, m):",
          "    \"\"\"returns x s.t. x = b[i] (mod m[i]) for all i\"\"\"",
          "    x, m_prod = 0, 1",
          "    for bi, mi in zip(b, m):",
          "        g, s, _ = extended_gcd(m_prod, mi)",
          "        if ((bi - x) % mi) % g:",
          "            return None",
          "        x += m_prod * (s * ((bi - x) % mi) // g)",
          "        m_prod = (m_prod * mi) // gcd(m_prod, mi)",
          "    return x % m_prod",
          "",
          ""
        ],
        "description": "Chinese Remainder Theorem (Multivariable) Template"
      },

      "Discrete Logarithm Template": {
        "prefix": "alg.dlog",
        "body": [
          "def discrete_log(a, b, mod):",
          "    \"\"\"",
          "    Returns smallest x > 0 s.t. pow(a, x, mod) == b or None if no such x exists.",
          "    Note: works even if a and mod are not coprime.",
          "    \"\"\"",
          "    n = int(mod**0.5) + 1",
          "",
          "    # tiny_step[x] = maximum j <= n s.t. b * a^j % mod = x",
          "    tiny_step, e = {}, 1",
          "    for j in range(1, n + 1):",
          "        e = e * a % mod",
          "        if e == b:",
          "            return j",
          "        tiny_step[b * e % mod] = j",
          "",
          "    # find (i, j) s.t. a^(n * i) % mod = b * a^j % mod",
          "    factor = e",
          "    for i in range(2, n + 2):",
          "        e = e * factor % mod",
          "        if e in tiny_step:",
          "            j = tiny_step[e]",
          "            return n * i - j if pow(a, n * i - j, mod) == b else None",
          "",
          ""
        ],
        "description": "Discrete Logarithm Template"
      },

      "LCM and GCD Template": {
        "prefix": "alg.lcmngcd",
        "body": [
          "from functools import reduce",
          "",
          "",
          "def gcd(x, y):",
          "    \"\"\"greatest common divisor of x and y\"\"\"",
          "    while y:",
          "        x, y = y, x % y",
          "    return x",
          "",
          "",
          "def extended_gcd(a, b):",
          "    \"\"\"returns gcd(a, b), s, r s.t. a * s + b * r == gcd(a, b)\"\"\"",
          "    s, old_s = 0, 1",
          "    r, old_r = b, a",
          "    while r:",
          "        q = old_r // r",
          "        old_r, r = r, old_r - q * r",
          "        old_s, s = s, old_s - q * s",
          "    return old_r, old_s, (old_r - old_s * a) // b if b else 0",
          "",
          "",
          "gcdm = lambda *args: reduce(gcd, args, 0)",
          "",
          "lcm = lambda a, b: a * b // gcd(a, b)",
          "",
          "lcmm = lambda *args: reduce(lcm, args, 1)",
          "",
          ""
        ],
        "description": "LCM and GCD Template"
      },

      "Integer Factorization Template": {
        "prefix": "alg.factor",
        "body": [
          "from collections import Counter",
          "",
          "",
          "def gcd(x, y):",
          "    \"\"\"greatest common divisor of x and y\"\"\"",
          "    while y:",
          "        x, y = y, x % y",
          "    return x",
          "",
          "",
          "def memodict(f):",
          "    \"\"\"memoization decorator for a function taking a single argument\"\"\"",
          "    class memodict(dict):",
          "        def __missing__(self, key):",
          "            ret = self[key] = f(key)",
          "            return ret",
          "",
          "    return memodict().__getitem__",
          "",
          "",
          "def pollard_rho(n):",
          "    \"\"\"returns a random factor of n\"\"\"",
          "    if n & 1 == 0:",
          "        return 2",
          "    if n % 3 == 0:",
          "        return 3",
          "",
          "    s = ((n - 1) & (1 - n)).bit_length() - 1",
          "    d = n >> s",
          "    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:",
          "        p = pow(a, d, n)",
          "        if p == 1 or p == n - 1 or a % n == 0:",
          "            continue",
          "        for _ in range(s):",
          "            prev = p",
          "            p = (p * p) % n",
          "            if p == 1:",
          "                return gcd(prev - 1, n)",
          "            if p == n - 1:",
          "                break",
          "        else:",
          "            for i in range(2, n):",
          "                x, y = i, (i * i + 1) % n",
          "                f = gcd(abs(x - y), n)",
          "                while f == 1:",
          "                    x, y = (x * x + 1) % n, (y * y + 1) % n",
          "                    y = (y * y + 1) % n",
          "                    f = gcd(abs(x - y), n)",
          "                if f != n:",
          "                    return f",
          "    return n",
          "",
          "",
          "@memodict",
          "def prime_factors(n):",
          "    \"\"\"returns a Counter of the prime factorization of n\"\"\"",
          "    if n <= 1:",
          "        return Counter()",
          "    f = pollard_rho(n)",
          "    return Counter([n]) if f == n else prime_factors(f) + prime_factors(n // f)",
          "",
          "",
          "def distinct_factors(n):",
          "    \"\"\"returns a list of all distinct factors of n\"\"\"",
          "    factors = [1]",
          "    for p, exp in prime_factors(n).items():",
          "        factors += [p**i * factor for factor in factors for i in range(1, exp + 1)]",
          "    return factors",
          "",
          "",
          "def all_factors(n):",
          "    \"\"\"returns a sorted list of all distinct factors of n\"\"\"",
          "    small, large = [], []",
          "    for i in range(1, int(n**0.5) + 1, 2 if n & 1 else 1):",
          "        if not n % i:",
          "            small.append(i)",
          "            large.append(n // i)",
          "    if small[-1] == large[-1]:",
          "        large.pop()",
          "    large.reverse()",
          "    small.extend(large)",
          "    return small",
          "",
          "",
          ""
        ],
        "description": "Integer Factorization Template"
      },

      "Fast Fourier Transform Template": {
        "prefix": "alg.fft",
        "body": [
          "import cmath",
          "",
          "MOD = 10**9 + 7",
          "",
          "",
          "def fft(a, inv=False):",
          "    n = len(a)",
          "    w = [cmath.rect(1, (-2 if inv else 2) * cmath.pi * i / n) for i in range(n >> 1)]",
          "    rev = [0] * n",
          "    for i in range(n):",
          "        rev[i] = rev[i >> 1] >> 1",
          "        if i & 1:",
          "            rev[i] |= n >> 1",
          "        if i < rev[i]:",
          "            a[i], a[rev[i]] = a[rev[i]], a[i]",
          "",
          "    step = 2",
          "    while step <= n:",
          "        half, diff = step >> 1, n // step",
          "        for i in range(0, n, step):",
          "            pw = 0",
          "            for j in range(i, i + half):",
          "                v = a[j + half] * w[pw]",
          "                a[j + half] = a[j] - v",
          "                a[j] += v",
          "                pw += diff",
          "        step <<= 1",
          "",
          "    if inv:",
          "        for i in range(n):",
          "            a[i] /= n",
          "",
          "",
          "def fft_conv(a, b):",
          "    s = len(a) + len(b) - 1",
          "    n = 1 << s.bit_length()",
          "    a.extend([0.0] * (n - len(a)))",
          "    b.extend([0.0] * (n - len(b)))",
          "",
          "    fft(a), fft(b)",
          "    for i in range(n):",
          "        a[i] *= b[i]",
          "    fft(a, True)",
          "",
          "    a = [a[i].real for i in range(s)]",
          "    return a",
          "",
          "",
          ""
        ],
        "description": "Fast Fourier Transform Template"
      },

      "Fast Subset Transform Template": {
        "prefix": "alg.fst",
        "body": [
          "import operator as op",
          "",
          "",
          "def fst(a, oplus=op.and_, inv=False):",
          "    step = 1",
          "    while step < len(a):",
          "        for i in range(0, len(a), 2 * step):",
          "            for j in range(i, i + step):",
          "                if oplus == op.and_:",
          "                    a[j], a[j + step] = (a[j + step] - a[j], a[j]) if inv else (a[j + step], a[j] + a[j + step])",
          "                elif oplus == op.or_:",
          "                    a[j], a[j + step] = (a[j + step], a[j] - a[j + step]) if inv else (a[j] + a[j + step], a[j])",
          "                elif oplus == op.xor:",
          "                    a[j], a[j + step] = a[j] + a[j + step], a[j] - a[j + step]",
          "        step *= 2",
          "",
          "    if inv and oplus == op.xor:",
          "        for i in range(len(a)):",
          "            a[i] /= len(a)",
          "",
          "",
          "def fst_conv(a, b):",
          "    fst(a), fst(b)",
          "    for i in range(len(a)):",
          "        a[i] *= b[i]",
          "    fst(1, inv=True)",
          "    return a",
          "",
          ""
        ],
        "description": "Fast Subset Transform Template"
      },

      "Number Theoretic Transform Template": {
        "prefix": "alg.ntt",
        "body": [
          "MOD = 998244353",
          "MODF = float(MOD)",
          "ROOT = 3.0",
          "",
          "MAGIC = 6755399441055744.0",
          "SHRT = 65536.0",
          "",
          "MODF_INV = 1.0 / MODF",
          "SHRT_INV = 1.0 / SHRT",
          "",
          "fround = lambda x: (x + MAGIC) - MAGIC",
          "fmod = lambda a: a - MODF * fround(MODF_INV * a)",
          "fmul = lambda a, b, c=0.0: fmod(fmod(a * SHRT) * fround(SHRT_INV * b) + a * (b - SHRT * fround(b * SHRT_INV)) + c)",
          "",
          "",
          "def fpow(x, y):",
          "    if y == 0:",
          "        return 1.0",
          "",
          "    res = 1.0",
          "    while y > 1:",
          "        if y & 1 == 1:",
          "            res = fmul(res, x)",
          "        x = fmul(x, x)",
          "        y >>= 1",
          "",
          "    return fmul(res, x)",
          "",
          "",
          "def ntt(a, inv=False):",
          "    n = len(a)",
          "    w = [1.0] * (n >> 1)",
          "",
          "    w[1] = fpow(ROOT, (MOD - 1) // n)",
          "    if inv:",
          "        w[1] = fpow(w[1], MOD - 2)",
          "",
          "    for i in range(2, (n >> 1)):",
          "        w[i] = fmul(w[i - 1], w[1])",
          "",
          "    rev = [0] * n",
          "    for i in range(n):",
          "        rev[i] = rev[i >> 1] >> 1",
          "        if i & 1 == 1:",
          "            rev[i] |= n >> 1",
          "        if i < rev[i]:",
          "            a[i], a[rev[i]] = a[rev[i]], a[i]",
          "",
          "    step = 2",
          "    while step <= n:",
          "        half, diff = step >> 1, n // step",
          "        for i in range(0, n, step):",
          "            pw = 0",
          "            for j in range(i, i + half):",
          "                v = fmul(w[pw], a[j + half])",
          "                a[j + half] = a[j] - v",
          "                a[j] += v",
          "                pw += diff",
          "",
          "        step <<= 1",
          "",
          "    if inv:",
          "        inv_n = fpow(n, MOD - 2)",
          "        for i in range(n):",
          "            a[i] = fmul(a[i], inv_n)",
          "",
          "",
          "def ntt_conv(a, b):",
          "    s = len(a) + len(b) - 1",
          "    n = 1 << s.bit_length()",
          "",
          "    a.extend([0.0] * (n - len(a)))",
          "    b.extend([0.0] * (n - len(b)))",
          "",
          "    ntt(a)",
          "    ntt(b)",
          "",
          "    for i in range(n):",
          "        a[i] = fmul(a[i], b[i])",
          "",
          "    ntt(a, True)",
          "    del a[s:]",
          "",
          "",
          ""
        ],
        "description": "Number Theoretic Transform Template"
      },

      "Deterministic Miller-Rabin Primality Test Template": {
        "prefix": "alg.isprime",
        "body": [
          "def is_prime(n):",
          "    \"\"\"returns True if n is prime else False\"\"\"",
          "    if n < 5 or n & 1 == 0 or n % 3 == 0:",
          "        return 2 <= n <= 3",
          "    s = ((n - 1) & (1 - n)).bit_length() - 1",
          "    d = n >> s",
          "    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:",
          "        p = pow(a, d, n)",
          "        if p == 1 or p == n - 1 or a % n == 0:",
          "            continue",
          "        for _ in range(s):",
          "            p = (p * p) % n",
          "            if p == n - 1:",
          "                break",
          "        else:",
          "            return False",
          "    return True",
          "",
          "",
          ""
        ],
        "description": "Deterministic Miller-Rabin Primality Test Template"
      },

      "Tonelli–Shanks Algorithm Template": {
        "prefix": "alg.modsqrt",
        "body": [
          "def mod_sqrt(a, p):",
          "    \"\"\"returns x s.t. x**2 == a (mod p)\"\"\"",
          "    a %= p",
          "    if a == 0:",
          "        return 0",
          "    assert pow(a, (p - 1) // 2, p) == 1",
          "    if p & 3 == 3:",
          "        return pow(a, (p + 1) // 4, p)",
          "",
          "    r = ((p - 1) & (1 - p)).bit_length() - 1",
          "    s, n = p >> r, 2",
          "    while pow(n, (p - 1) // 2, p) != p - 1:",
          "        n += 1",
          "",
          "    x, b, g = pow(a, (s + 1) // 2, p), pow(a, s, p), pow(n, s, p)",
          "    while True:",
          "        t = b",
          "        for m in range(r):",
          "            if t == 1:",
          "                break",
          "            t = (t * t) % p",
          "        if m == 0:",
          "            return x",
          "",
          "        gs = pow(g, 1 << (r - m - 1), p)",
          "        g, x = (gs * gs) % p, (x * gs) % p",
          "        b, r = (b * g) % p, m",
          "",
          ""
        ],
        "description": "Tonelli–Shanks Algorithm Template"
      },

      "Generalized Modular Inverse Template": {
        "prefix": "alg.midinv",
        "body": [
          "def extended_gcd(a, b):",
          "    \"\"\"returns gcd(a, b), s, r s.t. a * s + b * r == gcd(a, b)\"\"\"",
          "    s, old_s = 0, 1",
          "    r, old_r = b, a",
          "    while r:",
          "        q = old_r // r",
          "        old_r, r = r, old_r - q * r",
          "        old_s, s = s, old_s - q * s",
          "    return old_r, old_s, (old_r - old_s * a) // b if b else 0",
          "",
          "",
          "def modinv(a, m):",
          "    \"\"\"returns the modular inverse of a w.r.t. to m, works when a and m are coprime\"\"\"",
          "    g, x, _ = extended_gcd(a % m, m)",
          "    return x % m if g == 1 else None",
          "",
          ""
        ],
        "description": "Generalized Modular Inverse Template"
      },

      "Euler's Phi Function Template": {
        "prefix": "alg.phi",
        "body": [
          "def phi(n):",
          "    \"\"\"returns phi(x) for all x <= n\"\"\"",
          "    sieve = [i if i & 1 else i // 2 for i in range(n + 1)]",
          "    for i in range(3, n + 1, 2):",
          "        if sieve[i] == i:",
          "            for j in range(i, n + 1, i):",
          "                sieve[j] = (sieve[j] // i) * (i - 1)",
          "",
          "    return sieve",
          "",
          ""
        ],
        "description": "Euler's Phi Function Template"
      },

      "Primitive Root Template": {
        "prefix": "alg.proot",
        "body": [
          "from collections import Counter",
          "",
          "",
          "def gcd(x, y):",
          "    \"\"\"greatest common divisor of x and y\"\"\"",
          "    while y:",
          "        x, y = y, x % y",
          "    return x",
          "",
          "",
          "def memodict(f):",
          "    \"\"\"memoization decorator for a function taking a single argument\"\"\"",
          "    class memodict(dict):",
          "        def __missing__(self, key):",
          "            ret = self[key] = f(key)",
          "            return ret",
          "",
          "    return memodict().__getitem__",
          "",
          "",
          "def pollard_rho(n):",
          "    \"\"\"returns a random factor of n\"\"\"",
          "    if n & 1 == 0:",
          "        return 2",
          "    if n % 3 == 0:",
          "        return 3",
          "",
          "    s = ((n - 1) & (1 - n)).bit_length() - 1",
          "    d = n >> s",
          "    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:",
          "        p = pow(a, d, n)",
          "        if p == 1 or p == n - 1 or a % n == 0:",
          "            continue",
          "        for _ in range(s):",
          "            prev = p",
          "            p = (p * p) % n",
          "            if p == 1:",
          "                return gcd(prev - 1, n)",
          "            if p == n - 1:",
          "                break",
          "        else:",
          "            for i in range(2, n):",
          "                x, y = i, (i * i + 1) % n",
          "                f = gcd(abs(x - y), n)",
          "                while f == 1:",
          "                    x, y = (x * x + 1) % n, (y * y + 1) % n",
          "                    y = (y * y + 1) % n",
          "                    f = gcd(abs(x - y), n)",
          "                if f != n:",
          "                    return f",
          "    return n",
          "",
          "",
          "@memodict",
          "def prime_factors(n):",
          "    \"\"\"returns a Counter of the prime factorization of n\"\"\"",
          "    if n <= 1:",
          "        return Counter()",
          "    f = pollard_rho(n)",
          "    return Counter([n]) if f == n else prime_factors(f) + prime_factors(n // f)",
          "",
          "",
          "def ilog(n):",
          "    \"\"\"returns the smallest a, b s.t. a**b = n for integer a, b\"\"\"",
          "    a = n.bit_length()",
          "    for b in range(a, 0, -1):",
          "        lo, hi = 1, 1 << (a // b + 1)",
          "        while lo < hi:",
          "            mi = (lo + hi) // 2",
          "            a_b = mi**b",
          "            if a_b == n:",
          "                return mi, b",
          "            if a_b > n:",
          "                hi = mi",
          "            else:",
          "                lo = mi + 1",
          "",
          "",
          "def primitive_root(p):",
          "    \"\"\"returns a primitive root of p\"\"\"",
          "    factors = prime_factors(p - 1)",
          "",
          "    for i in range(2, p + 1):",
          "        ok = True",
          "        for j in factors:",
          "            ok &= pow(i, (p - 1) // j, p) != 1",
          "        if ok:",
          "            return i",
          "",
          "    return None",
          "",
          ""
        ],
        "description": "Primitive Root Template"
      },

      "Sieve of Eratosthenes Template": {
        "prefix": "alg.sieve",
        "body": [
          "def prime_sieve(n):",
          "    \"\"\"returns a sieve of primes >= 5 and < n\"\"\"",
          "    flag = n % 6 == 2",
          "    sieve = bytearray((n // 3 + flag >> 3) + 1)",
          "    for i in range(1, int(n**0.5) // 3 + 1):",
          "        if not (sieve[i >> 3] >> (i & 7)) & 1:",
          "            k = (3 * i + 1) | 1",
          "            for j in range(k * k // 3, n // 3 + flag, 2 * k):",
          "                sieve[j >> 3] |= 1 << (j & 7)",
          "            for j in range(k * (k - 2 * (i & 1) + 4) // 3, n // 3 + flag, 2 * k):",
          "                sieve[j >> 3] |= 1 << (j & 7)",
          "    return sieve",
          "",
          "",
          "def prime_list(n):",
          "    \"\"\"returns a list of primes <= n\"\"\"",
          "    res = []",
          "    if n > 1:",
          "        res.append(2)",
          "    if n > 2:",
          "        res.append(3)",
          "    if n > 4:",
          "        sieve = prime_sieve(n + 1)",
          "        res.extend(3 * i + 1 | 1 for i in range(1, (n + 1) // 3 + (n % 6 == 1)) if not (sieve[i >> 3] >> (i & 7)) & 1)",
          "    return res",
          "",
          ""
        ],
        "description": "Sieve of Eratosthenes Template"
      }
}